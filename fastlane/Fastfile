# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.28.7"

default_platform :ios

platform :ios do
    before_all do
        
    end
    
    desc "Bumps build number and runs unit tests on each push to development branch"
    desc "If successful, pushes the bumped version to git"
    lane :development do
        UI.message(ENV['SLACK_URL'])
        UI.message(ENV['EXPOSURE_BASE_URL'])
        UI.message(ENV['EXPOSURE_CUSTOMER'])
        UI.message(ENV['EXPOSURE_BUSINESS_UNIT'])
        UI.message(ENV['STREAMROOT_KEY'])
        
        ensure_git_branch(branch: ENV["DEVELOPMENT_BRANCH"])
        ensure_git_status_clean
        
        update_graph
        
        bump_build_number
        
        run_unit_tests
        
        clean_build_artifacts
        
        push_to_git_remote
        
        notify_slack_dev_success
    end
    
    lane :release do
        version = "v" + get_version_number(xcodeproj: ENV["XCODE_PROJECT"],
                                           target: ENV["RELEASE_VERSION_TARGET"])
        UI.message("version #{version}")
        if !git_tag_exists(tag: version)
            
            Action.sh("git branch '#{version}'")
            Action.sh("git checkout '#{version}'")
            
            fix_dependencies
            
            if !Action.sh("git diff --name-only").empty?
                Action.sh("git add -A")
                Action.sh("git commit -m 'Version: #{version}'")
            end
            
            update_graph
            run_unit_tests
            
            add_git_tag(tag: version)
            Action.sh("git push origin --all")
            Action.sh("git push --tags")
            
            current_time = Time.now.to_f
            project_name = ENV["PROJECT_TITLE"]
            
            slack(
                  use_webhook_configured_username_and_icon: true,
                  default_payloads: [],
                  attachment_properties: {
                  pretext: "#{project_name} #{version} released",
                  color: "good",
                  text: "Released!",
                  footer: ENV["DEV_TEAM_NAME"],
                  ts: current_time,
                  }
                  )
        end
    end
    
    desc "Runs all the tests"
    lane :run_unit_tests do
        UI.success("== iOS Unit tests ==")
        scan(
             workspace: ENV["UNIT_TEST_WORKSPACE"],
             scheme: ENV["IOS_UNIT_TEST_SCHEME"]
             )
        
         UI.success("== tvOS Unit tests ==")
         scan(
              workspace: ENV["UNIT_TEST_WORKSPACE"],
              scheme: ENV["TVOS_UNIT_TEST_SCHEME"]
              )
                  
    end
    
    lane :testflight_beta do
        build_and_sign(os: "ios")
        testflight_platform(os: "ios")
        
        build_and_sign(os: "tvos")
        testflight_platform(os: "appletvos")
    end
    
    # Private lanes
    private_lane :fix_dependencies do
        exposurePlaybackVersion = get_version_number(xcodeproj: ENV["XCODE_PROJECT"],
                                                     target: ENV["RELEASE_VERSION_TARGET"])
         UI.message(ENV["EXPOSURE_PLAYBACK_PROJECT"])
         UI.message(ENV["EXPOSURE_PLAYBACK_PROJECT_RELEASE_VERSION_TARGET"])
         UI.message("EXP: [#{exposurePlaybackVersion}]")
         
        cartfile = File.expand_path("..",Dir.pwd) + "/Cartfile"
        UI.message(cartfile)
        
        if File.exists?(cartfile)
            temp_file = Tempfile.new('foo')
            begin
                File.open(cartfile, 'r') do |file|
                    file.each_line do |line|
                        if line.include? "EricssonBroadcastServices/iOSClientExposurePlayback"
                            temp_file.puts line.gsub('"master"',"~> "+exposurePlaybackVersion)
                            else
                            temp_file.puts line
                        end
                    end
                end
                temp_file.close
                FileUtils.mv(temp_file.path, cartfile)
                ensure
                temp_file.close
                temp_file.unlink
                
            end
        end
    end
    
    desc "Checkout latest dependencies as declared in Cartfile.resolved"
    private_lane :update_graph do
        carthage(
                 command: "update",
                 platform: "iOS,tvOS",
                 use_submodules: false,
                 use_ssh: true,
                 use_binaries: false,
                 no_build: false
                 )
        update_dependency_graph()
        
        cocoapods()
    end
    
    private_lane :testflight_platform do |options|
        changelog = changelog_from_git_commits(
                                               commits_count: 10,
                                               pretty: '• %s',
                                               merge_commit_filtering: 'exclude_merges'
                                               )
                                               
        pilot(
              app_platform: options[:os],
              app_identifier: ENV["APP_IDENTIFIER"],
              changelog: strip_emoji(changelog),
              skip_waiting_for_build_processing: true
              )
             
        notify_slack_new_testflight
    end
    
    private_lane :build_and_sign do |options|
        cert
        
        profile = "com.emp.StreamrootIntegrationApp AppStore"
        if options[:os] == "ios"
            profile = "com.emp.StreamrootIntegrationApp AppStore"
            elsif options[:os] == "tvos"
            profile = "RedBee P2P tvOS Mac mini"
        end
        
        UI.message("profile #{profile}")
        
        
        sigh(
             platform: options[:os],
             app_identifier: "com.emp.StreamrootIntegrationApp"
             )
        
         plistPath = "StreamrootIntegrationApp/Info.plist"
         if options[:os] == "ios"
             plistPath = "StreamrootIntegrationApp/Info.plist"
         elsif options[:os] == "tvos"
             plistPath = "StreamrootIntegrationTvOSApp/Info.plist"
         end
         
         UI.message("plist #{plistPath}")
         
         set_info_plist_value(path: plistPath, key: "Exposure", subkey: "BaseUrl", value: ENV["EXPOSURE_BASE_URL"])
         set_info_plist_value(path: plistPath, key: "Exposure", subkey: "Customer", value: ENV["EXPOSURE_CUSTOMER"])
         set_info_plist_value(path: plistPath, key: "Exposure", subkey: "BusinessUnit", value: ENV["EXPOSURE_BUSINESS_UNIT"])
         set_info_plist_value(path: plistPath, key: "Streamroot", subkey: "Key", value: ENV["STREAMROOT_KEY"])
         
         scheme = ENV["IOS_TESTFLIGHT_SCHEME"]
         if options[:os] == "ios"
             scheme = ENV["IOS_TESTFLIGHT_SCHEME"]
         elsif options[:os] == "tvos"
             scheme = ENV["TVOS_TESTFLIGHT_SCHEME"]
         end
         
         UI.message("scheme #{scheme}")
         
         gym(
             export_method: "app-store",
             workspace: ENV["CLIENT_WORKSPACE"],
             scheme: scheme
             )
    end
    
    private_lane :bump_build_number do
        new_build_number = increment_build_number(xcodeproj: ENV["XCODE_PROJECT"])
        UI.message("Build: #{new_build_number}")
        commit_version_bump(
                            message: "Build number: #{new_build_number}",
                            xcodeproj: ENV["XCODE_PROJECT"]
                            )
    end
    
    desc "Posts a success notification for development integration"
    desc "in the Players channel on Slack"
    private_lane :notify_slack_dev_success do
        current_build_number = get_build_number
        current_time = Time.now.to_f
        project_name = ENV["PROJECT_TITLE"]
        
        changelog = changelog_from_git_commits(
                                               commits_count: 10,
                                               pretty: '• %s',
                                               merge_commit_filtering: 'exclude_merges'
                                               )
        
        UI.message(current_time)
        slack(
              use_webhook_configured_username_and_icon: true,
              default_payloads: [],
              attachment_properties: {
                    pretext: "#{project_name} build #{current_build_number} succesful!",
                    color: "good",
                    text: changelog,
                    footer: ENV["DEV_TEAM_NAME"],
                    ts: current_time,
                }
              )
    end
    
    private_lane :notify_slack_new_testflight do
        current_build_number = get_build_number
        current_time = Time.now.to_f
        
        slack(
              use_webhook_configured_username_and_icon: true,
              default_payloads: [],
              attachment_properties: {
              pretext: "Streamroot Integration App Build #{current_build_number} in flight!",
              color: "good",
              text: "Available through TestFlight once processed by iTunesConnect",
              footer: ENV["DEV_TEAM_NAME"],
              ts: current_time,
              }
              )
    end
    
    def strip_emoji( str )
        str = str.force_encoding('utf-8').encode
        clean_text = str.each_char.select { |char| char.bytesize < 4 }.join.squeeze(' ')
    end
    
    error do |lane, exception|
        
        slack(message: exception.message,
              success: false)
              
        UI.error("====> ERROR",exception.message)
    end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
